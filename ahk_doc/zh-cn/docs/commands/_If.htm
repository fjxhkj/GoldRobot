<!DOCTYPE HTML>
<html>
<head>
<title>#If</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>


<h1>#If <span class="ver">[AHK_L]</span></h1>

<p>创建上下文相关的<a href="../Hotkeys.htm">热键</a>和<a href="Hotstrings.htm">热字串</a>. 这样的热键会根据表达式的结果执行不同的操作 (或什么都不做).</p>

<pre class="Syntax">#If [, Expression ]</pre>
<h3>参数</h3>
<dl>

  <dt>Expression</dt>
  <dd><p>任何有效的 <a href="../Variables.htm#Expressions">表达式</a>.</p></dd>

</dl>

<h3>基本操作</h3>
<p>可以使用任何有效的表达式定义激活热键的上下文. 例如:</p>
<pre>#If WinActive("ahk_class Notepad") or WinActive(MyWindowTitle)
#Space::MsgBox You pressed Win+Spacebar in Notepad or %MyWindowTitle%.</pre>
<p>与 #IfWin 指令一样, #If 是与位置有关的: 它会影响在它后面的所有热键和热字串. #If 和 #IfWin 是互斥的; 即只有最近的 #If 或 #IfWin 会起作用.</p>
<p>要关闭热键的上下文相关性, 可以在脚本的适当位置指定一个不带任何参数的 #If 或任一 #IfWin 指令. 例如:</p>
<pre>#If</pre>

<h3>一般说明</h3>
<p>当按下由按键组合形成的热键时,  #If 表达式的计算结果决定了是否激活热键. 只有在表达式计算完成或<a href="_IfTimeout.htm">超时</a>后,系统才会响应键盘或鼠标输入.在计算这个表达式过程中(例如来自它所调用的函数)发送键击或鼠标点击可能导致复杂的情况,应该避免这样做.</p>
<p>当程序需要知道某个热键是否处于活动状态时,#If 后面的表达式可能会再次计算一次.例如,有一个 #If 表达式作用于一个普通的组合热键 <code>a &amp; b::</code> ,当按下前缀按键 (这个例子中前缀按键是<code>a</code>)时,表达式将会计算一次,计算结果将决定是否激活该组合热键.</p>
<p>由于前面所说的原因,应该把这个表达式设计为尽快结束并且不会产生副作用.</p>
<p><span class="ver">[AHK_L 53+]:</span> <a href="../Variables.htm#ThisHotkey">A_ThisHotkey</a> 和 <a href="../Variables.htm#TimeSinceThisHotkey">A_TimeSinceThisHotkey</a> 的设置是基于某个 #If 表达式正在计算中的热键.</p>
<p><span class="ver">[v1.0.95.00+]:</span> <a href="../Variables.htm#PriorHotkey">A_PriorHotkey</a> 和 <a href="../Variables.htm#TimeSincePriorHotkey">A_TimeSincePriorHotkey</a> 临时包含对应 "This" 变量的前一个值.</p>

<h3>相关</h3>
<p>大部分 <a href="_IfWinActive.htm">#IfWin</a> 指令的行为属性也适用于 #If.</p>
<p>可以使用 <a href="_IfTimeout.htm">#IfTimeout</a> 覆盖默认的超时时间值.</p>

<h3 id="Examples">示例</h3>
<pre class="NoIndent">
<em>; 示例 1: 在任务栏上滚动鼠标来调节音量.</em>
#If MouseIsOver("ahk_class Shell_TrayWnd")
WheelUp::Send {Volume_Up}
WheelDown::Send {Volume_Down}

MouseIsOver(WinTitle) {
    MouseGetPos,,, Win
    return WinExist(WinTitle . " ahk_id " . Win)
}

<em>; 示例 2: 在所有的编辑控件中的轻松删除单词的快捷键.</em>
#If ActiveControlIsOfClass("Edit")
^BS::Send ^+{Left}{Del}
^Del::Send ^+{Right}{Del}

ActiveControlIsOfClass(Class) {
    ControlGetFocus, FocusedControl, A
    ControlGet, FocusedControlHwnd, Hwnd,, %FocusedControl%, A
    WinGetClass, FocusedControlClass, ahk_id %FocusedControlHwnd%
    return (FocusedControlClass=Class)
}

<em>; 示例 3: 与上下文不相关的热键.</em>
#If
Esc::ExitApp

<em id="ex4">; Example 4: Dynamic hotkeys. <b>Requires Example 1.</b></em>
NumpadAdd::
Hotkey, If, MouseIsOver("ahk_class Shell_TrayWnd")
if (doubleup := !doubleup)
    Hotkey, WheelUp, DoubleUp
else
    Hotkey, WheelUp, WheelUp
return

DoubleUp:
Send {Volume_Up 2}
return
</pre>

</body>
</html>
