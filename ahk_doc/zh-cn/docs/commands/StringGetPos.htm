<!DOCTYPE HTML>
<html>
<head>
<title>StringGetPos</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>StringGetPos</h1>

<p>获取指定的子字符串在某个字符串中的位置.</p>

<pre class="Syntax">StringGetPos, OutputVar, InputVar, SearchText [, L#|R#, Offset]
Position := <a href="InStr.htm">InStr</a>(Haystack, Needle [, CaseSensitive?, StartingPos]) <em>; 请参阅 <a href="InStr.htm">InStr() 函数</a> 了解详情.</em></pre>
<h3>参数</h3>
<dl>

  <dt>OutputVar</dt>
  <dd><p>用来存储获取的相对于 <em>InputVar</em> 首个字符的位置的变量名. StringGetPos 中首个字符的位置为 0, 而 <a href="InStr.htm">InStr()</a> 中首个字符的位置为 1.</p></dd>

  <dt>InputVar</dt>
  <dd><p>内容将被搜索的输入变量名. 不要把名称括在百分号中, 除非您希望使用变量的 <em>内容</em> 作为被解析的变量名.</p></dd>

  <dt>SearchText</dt>
  <dd><p>要搜索的字符串. 如果没有启用 <a href="StringCaseSense.htm">StringCaseSense</a>, 那么匹配过程不区分大小写.</p></dd>

  <dt>L#|R#</dt>
  <dd><p>当 <em>SearchText</em> 在 <em>InputVar</em> 中出现多次时, 此参数决定找到哪个. 如果省略此参数, 那么会从 <em>InputVar</em> 左边开始查找, 直到找到首个匹配. 如果此参数为 1 或字母 R, 那么将从 <em>InputVar</em> 的右边往左开始查找, 直到找到首个匹配.</p>
      <p>要查找非首个匹配, 请在字母 L 或 R 后面指定出现位置的编号. 例如, 要找到从右边开始的第四个匹配, 请指定 r4. 注意: 如果编号小于或等于零, 将找不到匹配.</p></dd>

  <dt>Offset</dt>
  <dd><p>最左边或最右边 (取决于上面的参数) 需要跳过的字符数. 省略时默认为 0. 例如,后面的语句会从左边的第十个字符开始查找:<code>StringGetPos, OutputVar, InputVar, abc, , 9</code>.此参数可以为 <a href="../Variables.htm#Expressions">表达式</a>.</p></dd>

</dl>

<h3>ErrorLevel</h3>
<p>在 <em>InputVar</em> 中的指定位置没有找到 <em>SearchText</em> 时 <a href="../misc/ErrorLevel.htm">ErrorLevel</a> 被置为 1,否则为 0.</p>
<h3>备注</h3>
<p>与 <a href="StringMid.htm">StringMid</a> 和 <a href="InStr.htm">InStr()</a> 不同, StringGetPos 中首个字符的位置为 0.</p>
<p>获取的位置总是相对于 <em>InputVar</em> 的首个字符, 不受 <em>L#|R#</em> 和/或 <em>Offset</em> 的值影响. 例如, 如果在 123abc789 中查找 "abc", 那么获取的位置总为 3, 而不论查找的参数如何.</p>
<p>如果 <em>SearchText</em> 不存在于 <em>InputVar</em> 中的指定出现位置, 那么 <em>OutputVar</em> 将被置为 -1 且 <a href="../misc/ErrorLevel.htm">ErrorLevel</a> 被置为 1.</p>
<p>使用 <a href="SplitPath.htm">SplitPath</a> 可以更容易地将文件路径分解为目录, 文件名和扩展名.</p>
<p>内置变量 <a href="../Variables.htm">%A_Space%</a> 和 <a href="../Variables.htm">%A_Tab%</a> 分别包含了单个空格和单个 tab 字符. 当您需要搜索单独的空格或 tab 或在 <em>SearchText</em> 的开始或末尾含有空格或 tab 时, 这很有用.</p>
<h3>相关</h3>
<p><a href="InStr.htm">InStr()</a>, <a href="RegExMatch.htm">RegExMatch()</a>, <a href="IfInString.htm">IfInString</a>, <a href="IfIn.htm">if var in/contains MatchList</a>, <a href="StringCaseSense.htm">StringCaseSense</a>, <a href="StringReplace.htm">StringReplace</a>, <a href="SplitPath.htm">SplitPath</a>, <a href="StringLeft.htm">StringLeft</a>, <a href="StringLeft.htm">StringRight</a>, <a href="StringMid.htm">StringMid</a>, <a href="StringTrimLeft.htm">StringTrimLeft</a>, <a href="StringTrimLeft.htm">StringTrimRight</a>, <a href="StringLen.htm">StringLen</a>, <a href="StringLower.htm">StringLower</a>, <a href="StringLower.htm">StringUpper</a>, <a href="IfIs.htm">if var is type</a></p>
<h3>示例</h3>
<pre class="NoIndent">Haystack = abcdefghijklmnopqrs
Needle = def
StringGetPos, pos, Haystack, %Needle%
if pos &gt;= 0
    MsgBox, The string was found at position %pos%.</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; 示例 #2:
; 把文件的完整路径名分解成各个部分.
; 请注意使用 <a href="StringSplit.htm">StringSplit</a> 或
; <a href="LoopParse.htm">解析循环</a> 会更容易, 这里只是为了演示.</em>
FileSelectFile, file, , , Pick a filename in a deeply nested folder:
if file &lt;&gt;
{
    StringLen, pos_prev, file
    pos_prev += 1 <em>; 改变位置到最后一个字符的后面.</em>
    Loop
    {
        <em>; 从右边开始查找第 N 个匹配:</em>
        <strong>StringGetPos</strong>, pos, file, \, R%A_Index%
        if ErrorLevel
            break
        length := pos_prev - pos - 1
        pos_prev := pos
        pos += 2  <em>; 进行调整以便使用 StringMid.</em>
        StringMid, path_component, file, %pos%, %length%
        MsgBox Path component #%a_index% (from the right) is:`n%path_component%
    }
}</pre>

</body>
</html>
