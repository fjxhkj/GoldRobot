<!DOCTYPE HTML>
<html>
<head>
<title>Var := expression</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Var := expression</h1>

<p>计算表达式并把结果保存到 <a href="../Variables.htm">变量</a>.</p>

<pre class="Syntax">Var := expression</pre>
<h3>参数</h3>
<dl>

  <dt>Var</dt>
  <dd><p>用来保存 <em>表达式</em> 结果的 <a href="../Variables.htm">变量</a> 名.</p></dd>

  <dt>Expression</dt>
  <dd><p>请参阅 <a href="../Variables.htm#Expressions">表达式</a> 和下面的示例了解详情.</p></dd>

</dl>

<h3>备注</h3>
<p>:= 运算符进行了优化, 所以在简单的情况中它和 = 运算符执行的一样快, 例如:</p>
<pre>x := y  <em>; 与 x = %y% 执行效率相同</em>
x := 5  <em>; 与 x = 5 的执行效率相同.</em>
x := "literal string"  <em>; 与 x = literal string 的执行效率相同.</em></pre>
<p>单词 <code>true</code> 和 <code>false</code> 是值分别为 1 和 0 的内置变量.使用它们可以增加脚本的可读性, 例如:</p>
<pre>CaseSensitive := false
ContinueSearch := true</pre>
<p>这个命令以及其他任何接受 <em>OutputVar</em> 参数的命令都可以创建<a href="../misc/Arrays.htm#pseudo">伪数组</a>.这可以通过让 <em>OuputVar</em> 包含到另一个变量的引用来实现,例如 <code>Array%i% := Var/100 + 5</code>.请参阅<a href="../misc/Arrays.htm">数组</a>了解更多细节.</p>
<h3>相关</h3>
<p><a href="../Variables.htm#Expressions">表达式</a>, <a href="IfExpression.htm">IF (表达式)</a>, <a href="Functions.htm">函数</a>, <a href="SetEnv.htm">SetEnv</a>, <a href="EnvSet.htm">EnvSet</a>, <a href="EnvAdd.htm">EnvAdd</a>, <a href="EnvSub.htm">EnvSub</a>, <a href="EnvMult.htm">EnvMult</a>, <a href="EnvDiv.htm">EnvDiv</a>, <a href="IfEqual.htm">If</a>, <a href="../misc/Arrays.htm">数组</a></p>
<h3>示例</h3>
<pre class="NoIndent">Var := 3
Var := "literal string"
Var := Price * (1 - Discount/100)

Finished := not Done or A_Index &gt; 100
if not Finished
{
    FileAppend, %NewText%`n, %TargetFile%
    return
}
else
    ExitApp</pre>

</body>
</html>
