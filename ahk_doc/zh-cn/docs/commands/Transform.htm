<!DOCTYPE HTML>
<html>
<head>
<title>Transform</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Transform</h1>

<p>执行各种数学计算,按位运算以及类似 ASCII/Unicode 转换的任务.</p>

<pre class="Syntax">Transform, OutputVar, Cmd, Value1 [, Value2]</pre>
<h3>参数</h3>
<dl>

  <dt>OutputVar</dt>
  <dd><p>用来保存 <em>Cmd</em> 结果的变量名. <a href="SetFormat.htm">SetFormat</a> 决定了整数结果是保存为十六进制还是十进制.</p></dd>

  <dt>Cmd, Value1/2</dt>
  <dd><p>请参阅后面的列表.</p></dd>

</dl>

<h3>Cmd, Value1, Value2</h3>
<p><em>Cmd</em>, <em>Value1</em> 和 <em>Value2</em> 参数相互依赖, 它们的用法描述如下.</p>
<p id="Unicode"><strong>Unicode [, String]</strong>:<em>(此子命令在 AutoHotkey 的 Unicode 版本中不可用)</em>获取或保存剪贴板上的 Unicode 文本.注:使用<a href="../misc/Clipboard.htm#ClipboardAll">ClipboardAll</a>的方法可以保存和恢复整个剪贴板的内容,这样可以在不丢失剪贴板原始内容情况下用"Transform Unicode"操作剪贴板.</p>
<p>此子命令的两种操作模式举例如下:</p>
<pre>Transform, OutputVar, Unicode  <em>; 获取剪贴板中的 Unicode 文本为 UTF-8 字符串.</em>
Transform, Clipboard, Unicode, %MyUTF_String%  <em>; 把 Unicode 文本放到剪贴板中.</em></pre>
<p>在上面的第二个例子中, 可以使用原义的 UTF-8 字符串代替 %MyUTF_String%.</p>
<p>使用热键 (例如下面这个) 来得到与指定的 Unicode 字符串相应的 UTF-8 字符串:</p>
<pre>^!u::  <em>; Control+Alt+U 热键.</em>
MsgBox Copy some Unicode text onto the clipboard, then return to this window and press OK to continue.
Transform, ClipUTF, Unicode
Clipboard = Transform, Clipboard, Unicode, %ClipUTF%`r`n
MsgBox The clipboard now contains the following line that you can paste into your script. When executed, this line will cause the original Unicode string you copied to be placed onto the clipboard:`n`n%Clipboard%
return</pre>
<p>注:<code><a href="Send.htm#sendu">Send {U+nnnn}</a></code> 命令是生成 Unicode 字符的一种备用方法.</p>
<br>
<p id="Asc"><strong>Asc, String</strong>: 获取 <em>String</em> 中首个字符的字符码 (一个介于 1 到 255 之间的数字, 或在 Unicode 版本中为 1 到 65535). 如果 <em>String</em> 为空, 则 <em>OutputVar</em> 也会被置空. 例如:<code>Transform, OutputVar, Asc, %VarContainingString%</code>. 对应的函数: <a href="Asc.htm">Asc(String)</a>. 还可以用 <a href="Ord.htm">Ord(String)</a> 替换它用于支持 Unicode 补充字符集</p>
<p id="Chr"><strong>Chr, Value1</strong>: 获取字符码为 <em>Value1</em> 的单个字符. 如果 <em>Value1</em> 不是 1 到 255 (或在 Unicode 版本中的 1 到 65535 ) 之间的数字, 那么 <em>OutputVar</em> 会被置空来表明此问题. 例如: <code>Transform, OutputVar, Chr, 130</code>. 类似的函数: <a href="Chr.htm">Chr(Number)</a>. 不同于 Chr(), 转换不支持 Unicode 补充字符集 (字符码为 0x10000 到 0x10FFFF 的那些).</p>
<p id="Deref"><strong>Deref, String</strong>: 展开变量引用和包含在其他变量中的 <a href="_EscapeChar.htm">转义序列</a>. 任何糟糕格式的变量引用在展开时会被忽略. 把 <em>OutputVar</em> 展开为它的内容时也是如此; 换句话说, 在 <em>String</em> 变量中任何对 <em>OutputVar</em> 的引用在展开时会被忽略 (但请注意 <em>String</em> 自身可以 <u>是</u> %<em>OutputVar</em>%). 在下面的例子中,如果 var1 包含字符串"test"而 var2 包含<u>原义的</u>字符串"%var1%",则 <em>OutputVar</em> 会被赋值为字符串"test":<code>Transform, OutputVar, deref, %var2%</code>.在 <a href="Functions.htm">函数</a> 内, <em>String</em> 中的每个变量总是被解析为局部变量, 只有在局部变量不存在时才解析为全局变量 (如果没有则为空).</p>
<p id="HTML"><strong>HTML, String [, Flags]</strong>:</p>
<p><em>对于 ANSI 可执行脚本:</em>通过把 ASCII 值大于 127 的字符译成它们的 HTML 名称来把 <em>String</em> 转换为与它对应的 HTML 字符串(例如把 ￡ 译成 &amp;pound;).此外, 这四个字符 "&amp;&lt;&gt; 依次被译成 &amp;quot;&amp;amp;&amp;lt;&amp;gt;. 最后, 每个换行符 (`n) 被译成 &lt;br&gt;`n (即 &lt;br&gt; 后面跟着一个换行符). 忽略 <em>Flags</em> 参数.</p>
<p><em>在 Unicode 可执行脚本:</em>除了上述的功能外,<em>Flags</em> 可以为零或下列值的组合(和).如果省略, 则它默认为 1.</p>
<ul>
    <li>1: 把某些字符转换成命名表示法. 例如 € 被转换成 <code>&amp;euro;</code></li>
    <li>2: 把某些字符转换成编号表示法. 例如 € 被转换成 <code>&amp;#8364;</code></li>
</ul>
<p>仅影响非 ASCII 字符. 如果 <i>Flags</i> = 3, 仅在命名表示法不可用的情况下才使用编号表示法. 后面的这些字符总是需要转换: <code>&lt;&gt;"&amp;</code> 和 <code>`n</code> (换行符).</p>
<p><strong id="FromCodePage">FromCodePage</strong> / <strong><a name="ToCodePage"></a>ToCodePage</strong>: 不赞成使用. 请使用 <a href="StrPutGet.htm">StrPut() / StrGet()</a> 代替.</p>
<p><strong>Mod, Dividend, Divisor</strong>: 获取被除数 <em>Dividend</em> 除以除数 <em>Divisor</em> 后得到的余数. 如果 <em>Divisor</em> 为零, 则 <em>OutputVar</em> 被置空. <em>Dividend</em> 和 <em>Divisor</em> 都可以为小数. 如果 <em>Divisor</em> 为负数, 那么在计算中会被视为正数处理. 后面的例子结果为 2:<code>Transform, OutputVar, mod, 5, 3</code>.对应的函数:<a href="Math.htm#Mod">Mod(Dividend, Divisor)</a>.</p>
<p><strong>Pow, Base, Exponent</strong>: 获取底数 <em>Base</em> 的指数 <em>Exponent</em> 次幂. <em>Base</em> 和 <em>Exponent</em> 都可以为小数. 如果 <em>Exponent</em> 为负数, 那么即使 <em>Base</em> 和 <em>Exponent</em> 都是整数, <em>OutputVar</em> 也会被格式化为浮点数. 不支持 <em>Base</em> 为负数且 <em>Exponent</em> 为分数例如 1.5 的情况; 它会使得 <em>OutputVar</em> 被置空. 另请参阅: <a href="../Variables.htm#pow">** 运算符</a>.</p>
<p><strong>Exp, N</strong>: 获取 e (它的近似值为 2.71828182845905) 的 <em>N</em> 次幂. <em>N</em> 可以为负数也可以为小数. 对应的函数: <a href="Math.htm#Exp">Exp(N)</a>.</p>
<p><strong>Sqrt, Value1</strong>: 获取 Value1 的平方根. 如果 <em>Value1</em> 为负数, 则 <em>OutputVar</em> 会被置空. 对应的函数: <a href="Math.htm#Sqrt">Sqrt(Number)</a>.</p>
<p><strong>Log, Value1</strong>: 获取 <em>Value1</em> 的对数 (底数为 10). 如果 <em>Value1</em> 为负数, 则 <em>OutputVar</em> 会被置空. 对应的函数: <a href="Math.htm#Log">Log(Number)</a>.</p>
<p><strong>Ln, Value1</strong>: 获取 <em>Value1</em> 的自然对数 (底数为 e). 如果 <em>Value1</em> 为负数, 则 <em>OutputVar</em> 会被置空. 对应的函数: <a href="Math.htm#Ln">Ln(Number)</a>.</p>
<p><strong>Round, Value1 [, N]</strong>: 如果 <em>N</em> 省略, 则 <em>OutputVar</em> 会被设置为 <em>Value1</em> 四舍五入后的整数. 如果 <em>N</em> 为正数, 则 <em>Value1</em> 会被取整到 <em>N</em> 个小数位. 如果 <em>N</em> 为负数,则 <em>Value1</em> 会被取整到小数点左边 <em>N</em> 位.例如, -1 表示取整到个位, -2 表示取整到十位, 而 -3 表示取整到百位. 注: 取整小数位时不会移除末尾的零. 例如, 12.333 被取整到十分位后会变成 12.300000. 在操作前使用类似 <code><a href="SetFormat.htm">SetFormat</a>, float, 0.1</code> 的命令可以改变此行为(事实上,第一步使用 <a href="SetFormat.htm">SetFormat</a> 后就不需要再使用 Round 了).对应的函数: <a href="Math.htm#Round">Round(Number [, N])</a>.</p>
<p><strong>Ceil, Value1</strong>: 获取 <em>Value1</em> 向上取整到最近的整数. 对应的函数: <a href="Math.htm#Ceil">Ceil(Number)</a>.</p>
<p><strong>Floor, Value1</strong>: 获取 <em>Value1</em> 向下取整到最近的整数. 对应的函数: <a href="Math.htm#Floor">Floor(Number)</a>.</p>
<p><strong>Abs, Value1</strong>:获取<em>Value1</em>的绝对值,这是通过移除<em>Value1</em>前面的负号(破折号)(如果有)来计算的.对应的函数: <a href="Math.htm#Abs">Abs(Number)</a>.</p>
<p><strong>Sin, Value1</strong>: 获取 <em>Value1</em> 的正弦三角函数值. <em>Value1</em> 必须用弧度表示. 对应的函数: <a href="Math.htm#Sin">Sin(Number)</a>.</p>
<p><strong>Cos, Value1</strong>: 获取 <em>Value1</em> 的余弦三角函数值. <em>Value1</em> 必须用弧度表示. 对应的函数: <a href="Math.htm#Cos">Cos(Number)</a>.</p>
<p><strong>Tan, Value1</strong>: 获取 <em>Value1</em> 的正切三角函数值. <em>Value1</em> 必须用弧度表示. 对应的函数: <a href="Math.htm#Tan">Tan(Number)</a>.</p>
<p><strong>ASin, Value1</strong>: 获取弧度表示的反正弦值 (此数字的正弦值为 <em>Value1</em>). 如果 <em>Value1</em> 小于 -1 或大于 1, 则 <em>OutputVar</em> 会被置空. 对应的函数: <a href="Math.htm#ASin">ASin(Number)</a>.</p>
<p><strong>ACos, Value1</strong>: 获取弧度表示的反余弦值 (此数字的余弦值为 <em>Value1</em>). 如果 <em>Value1</em> 小于 -1 或大于 1, 则 <em>OutputVar</em> 会被置空. 对应的函数: <a href="Math.htm#ACos">ACos(Number)</a>.</p>
<p><strong>ATan, Value1</strong>: 获取弧度表示的反正切值 (此数字的正切值为 <em>Value1</em>). 对应的函数: <a href="Math.htm#ATan">ATan(Number)</a>.</p>
<br>
<p>请注意: 下面的每个按位操作都有相应的用于表达式中的更简洁的 <a href="../Variables.htm#bitwise">按位运算符</a>.</p>
<p><strong>BitNot, Value1</strong>: 把 <em>Value1</em> 按位取反后保存到 <em>OutputVar</em> (如果 <em>Value1</em> 是浮点数, 则在计算前把它截取成整数). 如果 <em>Value1</em> 介于 0 和 4294967295 (0xffffffff) 之间, 那么它会被视为 <u>无符号的</u> 32 位值. 否则, 它被视为 <u>有符号的</u> 64 位值. 后面的例子结果为 0xfffff0f0(4294963440):<code>Transform, OutputVar, BitNot, 0xf0f</code>.</p>
<p><strong>BitAnd, Value1, Value2</strong>: 获取 <em>Value1</em> 和 <em>Value2</em> 按位与运算的结果 (在计算前首先把浮点数截取成整数). 后面的例子结果为 0xff00(65280):<code>Transform, OutputVar, BitAnd, 0xff0f, 0xfff0</code>.</p>
<p><strong>BitOr, Value1, Value2</strong>: 获取 <em>Value1</em> 和 <em>Value2</em> 按位或运算的结果 (在计算前首先把浮点数截取成整数). 后面的例子结果为 0xf0f0(61680):<code>Transform, OutputVar, BitOr, 0xf000, 0x00f0</code>.</p>
<p><strong>BitXOr, Value1, Value2</strong>: 获取 <em>Value1</em> 和 <em>Value2</em> 按位异或运算的结果 (在计算前首先把浮点数截取成整数). 后面的例子结果为 0xff00(65280):<code>Transform, OutputVar, BitXOr, 0xf00f, 0x0f0f</code>.</p>
<p><strong>BitShiftLeft, Value1, Value2</strong>: 获取 <em>Value1</em> 往左移动 <em>Value2</em> 个位的结果, 这相当于 <em>Value1</em> 乘以 "2 的 <em>Value2</em> 次幂" (在计算前首先把浮点数截取成整数). 后面的例子结果为 8:<code>Transform, OutputVar, BitShiftLeft, 1, 3</code>.</p>
<p><strong>BitShiftRight, Value1, Value2</strong>: 获取 <em>Value1</em> 往右移动 <em>Value2</em> 个位的结果, 这相当于 <em>Value1</em> 除以 "2 的 <em>Value2</em> 次幂", 舍去余数 (在计算前首先把浮点数截取成整数). 后面的例子结果为 2:<code>Transform, OutputVar, BitShiftRight, 17, 3</code>.</p>
<h3>备注</h3>
<p>接受数值参数的子命令在它们的这些参数中也可以使用 <a href="../Variables.htm#Expressions">表达式</a>.</p>
<p>如果 <em>Value1</em> 或 <em>Value2</em> 其中一个为浮点数,则后面的 <em>Cmd</em> 的结果为浮点数而不是整数:Mod, Pow, Round 和 Abs.获取结果的小数位数由 <a href="SetFormat.htm">SetFormat</a> 决定.</p>
<p>要将弧度转换成角度, 请将它乘以 180/pi (约为 57.29578). 要将角度转换成弧度, 请将其乘以 pi/180 (约为 0.01745329252).</p>
<p>pi 的值 (约为 3.141592653589793) 为 1 的反正切值的 4 倍.</p>
<h3>相关</h3>
<p><a href="SetFormat.htm">SetFormat</a>, <a href="../Variables.htm#Expressions">表达式</a>, <a href="EnvMult.htm">EnvMult</a>, <a href="EnvDiv.htm">EnvDiv</a>, <a href="StringLower.htm">StringLower</a>, <a href="IfIs.htm">if var is type</a></p>
<h3>示例</h3>
<pre class="NoIndent">Transform, OutputVar, Asc, A  <em>; 获取字母 A 的 ASCII 码.</em></pre>

</body>
</html>
