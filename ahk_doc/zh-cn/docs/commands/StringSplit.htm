<!DOCTYPE HTML>
<html>
<head>
<title>StringSplit / StrSplit()</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>StringSplit / StrSplit()</h1>

<p>使用指定的分隔符把一个字符串分解成多个子字符串并保存到数组中.</p>

<pre class="Syntax">StringSplit, OutputArray, InputVar [, Delimiters, OmitChars]
Array := StrSplit(String [, Delimiters, OmitChars])  <em>; [v1.1.13+]</em></pre>
<h3>参数</h3>
<h4>StringSplit</h4>
<dl>

  <dt>OutputArray</dt>
  <dd><p>用来存储从 <em>InputVar</em> 分解出来的每个子字符串的<a href="../misc/Arrays.htm#pseudo">伪数组</a>名.例如, 如果指定 MyArray, 那么 MyArray0 中会保存分解出来的子字符串的数目 (没有则为 0), 首个子字符串为保存到 MyArray1, 第二个保存到 MyArray2 等.</p>
  <p>在<a href="Functions.htm">函数</a>中,要创建全局而不是局部的伪数组,必须先在函数中<a href="../Functions.htm#Global">声明</a> MyArray0 为全局变量(对于<a href="../Functions.htm#AssumeGlobal">假设全局</a>函数,反之亦成). 但是, 通常需要对每一个元素进行定义, 否则可能引起 <a href="../Functions.htm#ArrayConfusion">混乱的根源</a>. 详见: <a href="../Functions.htm#PseudoArrays">Functions</a>.</p></dd>

  <dt>InputVar</dt>
  <dd><p>需要被分解的变量名称. 不要把名称括在百分号中, 除非您希望使用变量的 <em>内容</em> 作为被解析的变量名. 注意:<em>InputVar</em> 不能是 <em>OutputArray</em> 中的其中一个变量. </p></dd>

  <dt>分隔符</dt>
  <dd><p>如果此参数为空或省略, 那么将把 <em>InputVar</em> 中的每个字符解析为单独的子字符串.</p>
      <p>其他情况下, <em>Delimiters</em> 中可以包含一个或多个字符 (区分大小写), 其中的每个都被用来确定 <em>InputVar</em> 中子字符串之间的边界. 由于分隔符不被视为子字符串的一部分, 所以它们不会被保存到 <em>OutputArray</em>. 此外, 如果 <em>InputVar</em> 中一对分隔符之间不存在其他字符, 那么相应的数组元素会被置空.</p>      
      <p>例如:<code>`,</code>(转义的逗号)将根据逗号每次出现的位置分割字符串. 同样地,使用 %A_Tab%%A_Space% 作为分隔符将在 <em>InputVar</em> 中每次遇到空格或 tab 时创建一个新的数组元素. </p>
      <p>要使用字符串而不是字符作为分隔符, 首先使用 <a href="StringReplace.htm">StringReplace</a> 把这个字符串在所有出现的地方替换为文本中从未使用的单个字符. 参考这个例子, 其中使用字符串 &lt;br&gt; 作为分隔符:</p>
<pre>StringReplace, NewHTML, HTMLString, &lt;br&gt;, ``, All  <em>; 把所有 &lt;br&gt; 替换为重音符.</em>
StringSplit, MyArray, NewHTML, ``  <em>; 使用重音符分隔字符串.</em></pre></dd>

</dl>
<h4>StrSplit() <span class="ver">[v1.1.13+]</span></h4>
<dl>

  <dt>Array(数组)<br>(返回值)</dt>
  <dd><p>字符串<a href="../Objects.htm#Usage_Simple_Arrays">数组</a>(对象). </p></dd>

  <dt>String</dt>
  <dd><p>要分割的字符串. </p></dd>

  <dt>分隔符</dt>
  <dd><p>如果此参数为空或省略,那么将把输入字符串中的每个字符解析为单独的子字符串. </p>
      <p>其他情况下,<em>Delimiters</em> 中可以是单个字符串或字符串数组,其中的每个都被用来确定子字符串之间的边界. 由于分隔符不被视为子字符串的一部分,所以它们不会被包含在返回的数组中. 此外,如果输入字符串中一对分隔符之间没有其他字符,那么相应的数组元素会被置空. </p>      
      <p>例如:<code>","</code>将根据逗号每次出现的位置分割字符串. 同样地,使用 <code>[A_Tab, A_Space]</code> 作为分隔符将在输入字符串中每次遇到空格或 tab 时创建一个新的数组元素. </p></dd>

</dl>
<h4>两者</h4>
<dl>

  <dt>OmitChars</dt>
  <dd><p>可选的字符列表 (区分大小写), 用来从每个数组元素的开始和结尾部分移除这些字符. 例如如果在 <em>OmitChars</em> 中使用 <code>%A_Space%%A_Tab%</code>(StringSplit)或<code>" `t"</code>(StrSplit),那么每个元素中开始和结尾部分(但中间的不会)的空格和 tab 会被移除. </p>
    <p>如果 <em>Delimiters</em> 为空, 那么 <em>OmitChars</em> 表示需要从数组中排除的那些字符.</p>
    <p>与其他大多数命令的最后一个参数不同,在 StringSplit 参数 <em>OmitChars</em> 中的逗号必须进行转义(`,). </p></dd>

</dl>

<h3>备注</h3>
<p>如果数组元素已经存在,那么 StringSplit 命令只会改变其前面 N 个元素的值,此处 N 为在 <em>InputVar</em> 中的子字符串的数目. 原来存在的第 N 个元素之后的其他元素会保持不变. 因此, 最好使用零元素 (MyArray0) 来确定此命令实际分解出了多少项.</p>
<p>会保留例如空格和 tab 这样的空白字符,除非它们被作为分隔符或包含在 <em>OmitChars</em> 中. 调用 <a href="Trim.htm">Trim</a> 函数可以把空格和 tab 从每个变量的两端移除. 例如:<code>MyArray1 := Trim(MyArray1)</code>. </p>
<p>要分割标准 CSV (逗号分隔值) 格式的字符串, 请使用 <a href="LoopParse.htm">解析循环</a> 内置的 CSV 处理功能.</p>
<p>要在分割前按不同的顺序排列字段, 请使用 <a href="Sort.htm">Sort</a> 命令.</p>
<p>如果您不需要把子字符串长时间的存储到内存中, 建议使用 <a href="LoopParse.htm">解析循环</a>, 尤其在 <em>InputVar</em> 非常巨大时可以节约大量内存. 例如:</p>
<pre>Colors = red,green,blue
Loop, parse, Colors, `,
    MsgBox Color number %A_Index% is %A_LoopField%.</pre>
<h3>相关</h3>
<p><a href="LoopParse.htm">解析循环</a>, <a href="../misc/Arrays.htm">Arrays</a>, <a href="Sort.htm">Sort</a>, <a href="SplitPath.htm">SplitPath</a>, <a href="IfInString.htm">IfInString</a>, <a href="StringGetPos.htm">StringGetPos</a>, <a href="StringMid.htm">StringMid</a>, <a href="StringTrimLeft.htm">StringTrimLeft</a>, <a href="StringTrimLeft.htm">StringTrimRight</a>, <a href="StringLen.htm">StringLen</a>, <a href="StringLower.htm">StringLower</a>, <a href="StringLower.htm">StringUpper</a>, <a href="StringReplace.htm">StringReplace</a></p>
<h3>示例</h3>
<pre class="NoIndent">TestString = This is a test.
StringSplit, word_array, TestString, %A_Space%, .  <em>; 移除句点.</em>
MsgBox, The 4th word is %word_array4%.

Colors = red,green,blue
StringSplit, ColorArray, Colors, `,
Loop, %ColorArray0%
{
    this_color := ColorArray%a_index%
    MsgBox, Color number %a_index% is %this_color%.
}</pre>
<pre class="NoIndent">TestString := "This is a test."
word_array := StrSplit(TestString, A_Space, ".")  <em>; 忽略句点. </em>
MsgBox % "The 4th word is " word_array[4]

Colors := "red,green,blue"
ColorArray := StrSplit(Colors, ",")
Loop % ColorArray.MaxIndex()
{
    this_color := ColorArray[a_index]
    MsgBox, Color number %a_index% is %this_color%.
}</pre>

</body>
</html>
