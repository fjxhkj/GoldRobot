<!DOCTYPE HTML>
<html>
<head>
<title>KeyWait</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>KeyWait</h1>

<p>等待按键或鼠标/操纵杆按钮被松开或按下.</p>

<pre class="Syntax">KeyWait, KeyName [, Options]</pre>
<h3>参数</h3>
<dl>

  <dt>KeyName</dt>
  <dd><p>此参数可以是键盘中任何的单个字符或 <a href="../KeyList.htm">按键列表</a> 中的其中一个键名, 例如鼠标/操纵杆按钮. 不支持除操纵杆按钮外的其他操纵杆属性.</p>
      <p>还可以指定明确的虚拟按键代码,例如 <code>vkFF</code>.只有在一个按键没有指定名称且按下时不产生可见的字符这样少见的情况下, 这种方法才有用. 它的虚拟按键代码可以通过<a href="../KeyList.htm#SpecialKeys">按键列表页面</a>底部的步骤来确定.</p></dd>

  <dt>选项</dt>
  <dd><p>如果此参数为空, 则命令会无限期等待用户松开指定的按键或鼠标/操纵杆按钮. 不过, 如果没有安装 <a href="_InstallKeybdHook.htm">键盘钩子</a> 并且 <em>KeyName</em> 是使用类似 <a href="Send.htm">Send</a> 命令模拟释放的键盘按键, 则此按键会被视为物理松开了. 没有安装<a href="_InstallMouseHook.htm">鼠标钩子</a>时,对鼠标按钮同样如此.</p>
      <p>选项: 由一个或多个下列字母组成的字符串 (可任意顺序, 字母间可以用空格分隔):</p>
      <p><strong>D</strong>: 等待按键被按下.</p>            
      <p><strong>L</strong>: 检测按键的逻辑状态, 这是操作系统和活动窗口所认为的按键所处的状态 (可能和它的物理状态不一致). 对于操纵杆按钮会忽略此选项.</p>
      <p><strong>T</strong>:超时(例如 <code>T3</code>).超时前等待的秒数,超时后设置 <a href="../misc/ErrorLevel.htm">ErrorLevel</a> 为 1.如果按键或按钮达到指定的状态, 则命令不再等待超时时间到期. 相反地,它会立即设置 <a href="../misc/ErrorLevel.htm">ErrorLevel</a> 为 0 并让脚本继续执行.</p>
      <p>此超时时间值可以为浮点数 (例如 2.5), 但不能为十六进制值 (例如 0x03).</p></dd>

</dl>

<h3>ErrorLevel</h3>
<p>命令超时后 <a href="../misc/ErrorLevel.htm">ErrorLevel</a> 被置为 1, 否则为 0.</p>
<h3>备注</h3>
<p>如果没有安装键盘和/或鼠标钩子,则按键或鼠标按钮的物理状态通常和逻辑状态一致(有时逻辑状态可能比物理状态滞后)；如果安装了钩子,则它会准确反映出用户是否按下了按键.您可以通过 <a href="KeyHistory.htm">KeyHistory</a> 命令或菜单项确定脚本中是否使用了钩子. 通过添加 <a href="_InstallKeybdHook.htm">#InstallKeybdHook</a> 和 <a href="_InstallMouseHook.htm">#InstallMouseHook</a> 指令到脚本中您可以强制安装其中一种或两种钩子.</p>
<p>当此命令处于等待状态时, 可以通过 <a href="../Hotkeys.htm">热键</a>, <a href="Menu.htm">自定义菜单项</a> 或 <a href="SetTimer.htm">计时器</a> 启动新的 <a href="../misc/Threads.htm">线程</a>.</p>
<p>要等待两个或多个按键被释放, 请连续使用 KeyWait. 例如:</p>
<pre>KeyWait Control  <em>; 等待 Control 和 Alt 被释放.</em>
KeyWait Alt</pre>
<p>要等待一组按键中的任意一个被按下, 请参阅 <a href="Input.htm">Input</a> 命令的示例部分.</p>
<h3>相关</h3>
<p><a href="GetKeyState.htm">GetKeyState</a>, <a href="../KeyList.htm">按键列表</a>, <a href="Input.htm">Input</a>, <a href="KeyHistory.htm">KeyHistory</a>, <a href="_InstallKeybdHook.htm">#InstallKeybdHook</a>, <a href="_InstallMouseHook.htm">#InstallMouseHook</a>, <a href="ClipWait.htm">ClipWait</a>, <a href="WinWait.htm">WinWait</a></p>
<h3>示例</h3>
<pre class="NoIndent"><em>; 示例 #1: 基本用法:</em>
KeyWait, a  <em>; 等待 A 被释放.</em>
KeyWait, LButton, D  <em>; 等待鼠标左键被按下.</em>
KeyWait, Joy1, D T3  <em>; 等待首个操纵杆按钮在 3 秒内被按下.</em>
KeyWait, LAlt, L  <em>; 等待左 Alt 键被逻辑释放.</em></pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; 示例 #2: 简单的热键:</em>
~Capslock::
KeyWait, Capslock  <em>; 等待用户实际释放.</em>
MsgBox You pressed and released the Capslock key.
return</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; 示例 #3: 重映射按键或鼠标按钮 (这里仅为了演示
; 因为使用 <a href="misc/Remap.htm">内置的重映射功能</a> 会更容易使用):
; 当 NumpadAdd 按下时持续按住鼠标左键, 这样实际上
; 把 NumpadAdd 映射成了鼠标左键.</em>
*NumpadAdd::
MouseClick, left,,, 1, 0, D  <em>; 按住鼠标左键.</em>
KeyWait, NumpadAdd  <em>; 等待按键被释放.</em>
MouseClick, left,,, 1, 0, U  <em>; 释放鼠标按钮.</em>
return</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; 示例 #4: 检测什么时候两次按下了某个按键 (类似于双击).
; 当您使用 RControl 修饰另一个键时
; 使用 KeyWait 来停止键盘自动重复功能以避免产生不想要的两次按下.  它通过保持热键
; 线程的运行且依靠
; #MaxThreadsPerHotkey 默认设置 1 来实现拦截自动重复的目的.
; 注: 在 <a href="SetTimer.htm">SetTimer</a> 页面的底部有一个更精巧的脚本, 
; 能分辨出单次, 两次和三次按下的区别.</em>
~RControl::
if (A_PriorHotkey &lt;&gt; "~RControl" or A_TimeSincePriorHotkey &gt; 400)
{
    <em>; 两次按下时间间隔太长, 所以这不是一个两次按下.</em>
    KeyWait, RControl
    return
}
MsgBox You double-pressed the right control key.
return</pre>

</body>
</html>
