<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>VarSetCapacity()</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>VarSetCapacity()</h1>

<p>增加或清空变量占用的内存。通常只有在特殊情况下才需要，例如 <a href="DllCall.htm">DllCall</a>。</p>

<pre class="Syntax">GrantedCapacity := VarSetCapacity(UnquotedVarName [, RequestedCapacity, FillByte])</pre>
<h3>参数</h3>
<dl>

  <dt>GrantedCapacity</dt>
  <dd><p>变量现在占用的字节数, 它会大于或等于 <em>RequestedCapacity</em>. 如果 <em>VarName</em> 不是有效的变量名 (例如原义的字符串或数字), 则返回 0. 如果系统没有足够的内存来进行变更 (很罕见), 则会显示错误对话框并返回当前的容量, 此行为可能在将来的版本中改变.</p></dd>

  <dt>UnquotedVarName</dt>
  <dd><p>变量名 (<em>没有括在百分号中</em>). 例如: <code>VarSetCapacity(MyVar, 1000)</code>. 这也可以是动态变量, 例如 <code>Array%i%</code> 或 <a href="../Functions.htm#ByRef">函数的 ByRef 参数</a>.</p></dd>

  <dt>RequestedCapacity</dt>
  <dd><p>如果省略, 则返回变量当前的容量且不会改变它的内容. 否则, 会丢失变量中的所有内容 (变量变成空的).</p>
      <p>在 <em>RequestedCapacity</em> 中指定字节数, 表示在调整后变量要占用的空间. 对于 Unicode 字符串, 这里应是长度的两倍. <em>RequestedCapacity</em> 不包含内部的零终止符. 例如, 指定 1 会允许变量最多占用一字节的空间加上内部的终止符. 注: 如果后面脚本给变量分配更大的值, 那么它会自动扩展容量.</p> 
      <p>因此可以经常简单地调用此函数来确保变量占用最小的空间, 考虑到性能原因, 只有在 <em>RequestedCapacity</em> 为 0 时它才会缩小变量的容量. 换句话说, 如果变量的容量已经大于 <em>RequestedCapacity</em>, 则不会减小它的容量 (但为了保持一致, 变量会被置空).</p>
      <p>因此, 要明确地缩小变量, 首先请使用 <code>VarSetCapacity(Var, 0)</code> 释放它占用的内存, 然后使用 <code>VarSetCapacity(Var, NewCapacity)</code> 或者简单地让它自动按需从零扩展.</p>
      <p>考虑到性能的原因, 要释放一个原来容量小于 64 字节 (在 Unicode 版本中为 128 字节) 的变量可能会没有效果, 因为它的内存是永久性的. 此时, 会返回当前容量而不是 0.</p>
      <p>考虑到性能的原因, 容量小于 4096 字节的变量的内存不能通过赋值空字符串的方法来释放 (例如 <code>Var := ""</code>). 然而, <code>VarSetCapacity(Var, 0)</code> 会释放.</p>
      <p><a name="neg1"></a>在 v1.0.44.03+, 在 <em>RequestedCapacity</em> 指定 -1 来更新变量内部存储的字符串长度为当前内容的长度. 这可用在间接修改变量的时候, 例如通过 <a href="DllCall.htm">DllCall()</a> 传递它的 <a href="../Variables.htm#amp">地址</a>. 在这种模式中, VarSetCapacity() 返回以字节为单位的长度而不是容量.</p></dd>

  <dt>FillByte</dt>
  <dd><p>此参数通常省略, 此时不会对目标变量的内存进行初始化 (作为替代, 只是像上面描述的那样简单地把变量置空). 否则, 请指定介于 0 和 255 之间的整数. 目标变量内存区域的每个字节 (它的当前容量, 可能大于 <em>RequestedCapacity</em>) 会被设为这个数字. 零显然是最常用的值, 这可用于要在变量中保存原始的二进制数据时, 例如 <a href="DllCall.htm#struct">DllCall 结构</a>.</p></dd>

</dl>

<h3>备注</h3>
<p>除了在 <a href="DllCall.htm#str">DllCall</a> 中描述的它的用法, 此函数还可以用来在通过逐步连接的方法构造字符串时提升性能. 这是因为当您可以确定字符串的最终长度时可以避免多次自动的容量大小调整. 在这种情况中, <em>RequestedCapacity</em> 不需要太准确: 如果容量太小, 性能仍然会提升, 而当分配的容量用完时变量会开始自动扩展. 如果容量太大, 会浪费一些内存, 不过只是暂时的, 因为在操作完成后使用 <code>VarSetCapacity(Var, 0)</code> 或 <code>Var := ""</code> 后可以释放所有的内存.</p>
<p><a href="_MaxMem.htm">#MaxMem</a> 只限制变量自动扩展所占用的容量. 它不会影响 <a href="VarSetCapacity.htm">VarSetCapacity</a>.</p>
<h3>相关</h3>
<p><a href="DllCall.htm">DllCall</a>, <a href="_MaxMem.htm">#MaxMem</a>, <a href="NumPut.htm">NumPut</a>, <a href="NumGet.htm">NumGet</a></p>
<h3>示例</h3>
<pre class="NoIndent"><em>; 通过让 MyVar 有足够的空间进行操作来优化性能.</em>
VarSetCapacity(MyVar, 10240000)  <em>; ~10 MB</em>
Loop
{
    ...
    MyVar = %MyVar%%StringToConcatenate%
    ...
}</pre>

<pre class="NoIndent"><em>; 计算字符串需要的缓冲空间.</em>
bytes_per_char := A_IsUnicode ? 2 : 1
max_chars := 500
max_bytes := max_chars * bytes_per_char

Loop 2
{
    <em>; 分配用于 DllCall 的空间.</em>
    VarSetCapacity(buf, max_bytes)

    if A_Index = 1
        <em>; 通过 DllCall 间接修改变量.</em>
        DllCall("wsprintf", <span class="red">"ptr", &amp;buf</span>, "str", "0x%08x", "uint", 4919)
    else
        <em>; 使用 "str" 来自动更新长度:</em>
        DllCall("wsprintf", <span class="blue">"str", buf</span>, "str", "0x%08x", "uint", 4919)

    <em>; 连接字符串以演示为什么需要更新长度:</em>
    wrong_str := buf . "&lt;end&gt;"
    wrong_len := StrLen(buf)

    <em>; 更新变量的长度.</em>
    VarSetCapacity(buf, -1)

    right_str := buf . "&lt;end&gt;"
    right_len := StrLen(buf)

    MsgBox,
    (
    Before updating
      String: %wrong_str%
      Length: %wrong_len%

    After updating
      String: %right_str%
      Length: %right_len%
    )
}
</pre>

</body>
</html>
