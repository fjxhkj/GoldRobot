<!DOCTYPE HTML>
<html>
<head>
<title>WinGet</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>WinGet</h1>

<p>获取指定窗口的唯一 ID,进程 ID,进程名或控件列表.它还可以获取匹配指定条件的所有窗口的列表.</p>

<pre class="Syntax">WinGet, OutputVar [, Cmd, WinTitle, WinText, ExcludeTitle, ExcludeText]</pre>
<h3>参数</h3>
<dl>

  <dt>OutputVar</dt>
  <dd><p>用来保存 <em>Cmd</em> 结果的变量名.</p></dd>

  <dt>Cmd</dt>
  <dd>请参阅后面的列表.
    </dd>

  <dt>WinTitle</dt>
  <dd><p>窗口标题或识别目标窗口的其他条件.请参阅 <a href="../misc/WinTitle.htm">WinTitle</a>.</p></dd>

  <dt>WinText</dt>
  <dd><p>如果使用此参数, 那么它必须是目标窗口中单个文本元素的子字符串 (和内置的 Window Spy 工具显示的一样). 当 <a href="DetectHiddenText.htm">DetectHiddenText</a> 的设置为 ON 时, 那么会检测到隐藏文本元素.</p></dd>

  <dt>ExcludeTitle</dt>
  <dd><p>标题中含有此参数值的窗口将被排除.</p></dd>

  <dt>ExcludeText</dt>
  <dd><p>文本中含有此参数值的窗口将被排除.</p></dd>

</dl>

<p><em>Cmd</em> 为要执行的操作, 留空时默认为 <em>ID</em>. 它可以为下列单词的其中一个:</p>
<p id="ID"><strong>ID</strong>: 获取窗口的唯一 ID 号 (HWND/句柄). 如果没有匹配窗口, 那么 <em>OutputVar</em> 被置空. 使用 <a href="WinExist.htm">WinExist()</a> 和 <a href="WinActive.htm">WinActive()</a> 也可以获取窗口的 ID；例如,<code>WinExist("A")</code> 能快速获取活动窗口 ID.要找出控件的 HWND(用于 <a href="PostMessage.htm">Post/SendMessage</a> 或 <a href="DllCall.htm">DllCall</a>),请使用 <a href="ControlGet.htm#Hwnd">ControlGet Hwnd</a> 或 <a href="MouseGetPos.htm">MouseGetPos</a>.</p>
<p><strong>IDLast</strong>: 与上面相同, 不过如果找到多个匹配窗口, 它会获取最后的/最下面的窗口 ID. 如果只有一个匹配, 那么它的效果与 <em>ID</em> 相同. 这种特性类似于 <a href="WinActivateBottom.htm">WinActivateBottom</a>.</p>
<p><strong>PID</strong>: 获取窗口的 <a href="Process.htm">进程 ID (PID)</a>.</p>
<p id="ProcessName"><strong>ProcessName</strong>: 获取拥有窗口的进程名 (例如 notepad.exe). 如果没有匹配窗口, 那么 <em>OutputVar</em> 被置空.</p>
<p id="ProcessPath"><strong>ProcessPath</strong> <span class="ver">[v1.1.01+]</span>: 类似于 <em>ProcessName</em>, 但获取进程的完整路径和名称而不仅是名称.</p>
<p><strong>Count</strong>: 获取匹配指定 <em>WinTitle</em>, <em>WinText</em>, <em>ExcludeTitle</em> 以及 <em>ExcludeText</em> 的窗口数 (没有则为 0). 要统计系统中所有窗口数, 请省略所有的四个标题/文本参数. 只有在打开 <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> 设置时才会包括隐藏窗口.</p>
<p id="List"><strong>List</strong>: 获取匹配指定的 <em>WinTitle</em>, <em>WinText</em>, <em>ExcludeTitle</em> 以及 <em>ExcludeText</em> 的所有窗口的唯一 ID 号 (要获取整个系统中所有窗口, 请省略所有的四个标题/文本参数). 每个 ID 号保存在名称以 <em>OutputVar</em> 开始的变量(构成<a href="../misc/Arrays.htm#pseudo">伪数组</a>)中,而 <em>OutputVar</em> 自己则保存了获取的项数(没有则为 0).例如, 如果 <em>OutputVar</em> 为 MyArray 且找到两个匹配的窗口, 那么 MyArray1 会被设置为首个窗口的 ID, MyArray2 被设置为第二个窗口的 ID, 同时 MyArray 自身被设置为数目 2. 窗口获取的顺序是从最上面到最下面 (根据它们在桌面上的堆放顺序). 只有在打开 <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> 设置时才会包括隐藏窗口. 在<a href="Functions.htm">函数</a>中,要创建全局而不是局部的伪数组,必须在使用此命令前<a href="../Functions.htm#Global">声明</a> MyArray 为全局变量(对于<a href="../Functions.htm#AssumeGlobal">假设全局</a>函数, 反之亦然. 但是, 通常需要对每一个变量进行声明, 否则可能引起 <a href="../Functions.htm#ArrayConfusion">混乱的根源</a>.</p>
<p><strong>MinMax</strong>: 获取窗口的最小化/最大化状态. 如果不存在匹配窗口, 则 <em>OuputVar</em> 被置空; 否则, 它被设置为下列数字的其中一个:<br>
	-1: 窗口处于最小化状态 (使用 <a href="WinRestore.htm">WinRestore</a> 可以让它还原). <br>
	1: 窗口处于最大化状态 (使用 <a href="WinRestore.htm">WinRestore</a> 可以让它还原).<br>
	0: 窗口既不处于最小化状态也不处于最大化状态.</p>
<p id="ControlList"><strong>ControlList</strong>: 获取窗口中所有控件的控件名称. 如果没有匹配窗口或窗口中没有控件, 那么 <em>OutputVar</em> 被置空. 否则, 每个控件的名称由其类名紧接着序号 (ClassNN) 组成, 如同 Window Spy 显示的那样.</p>
<p>除最后一项外的其他项以换行符结束 (`n). 要逐个检查每个控件的名称, 请使用 <a href="LoopParse.htm">解析循环</a>, 如同下文示例部分演示的那样.</p>
<p>控件根据它们的 Z 顺序排列, 当窗口支持 TAB 导航时这通常和 TAB 键导航的顺序相同.</p>
<p>当前鼠标光标下的控件可以通过 <a href="MouseGetPos.htm">MouseGetPos</a> 获取.</p>
<p><strong>ControlListHwnd</strong> <span class="ver">[v1.0.43.06+]:</span> 与上面相同, 不过它获取每个控件的 <a href="ControlGet.htm#Hwnd">窗口句柄 (HWND)</a> 而不是其 ClassNN.</p>
<p><strong>Transparent</strong>: 获取度数表示的窗口的透明度 (请参阅 <a href="WinSet.htm">WinSet</a> 了解如何设置透明度). 出现后面这些情况时 <em>OutputVar</em> 被置空: 1) 操作系统低于 Windows XP; 2) 没有匹配窗口; 3) 窗口没有设置透明度等级; 或 4) 其他情况 (由操作系统行为引起), 例如设置透明后窗口被最小化, 还原和/或重设大小. 否则, 被设置为介于 0 和 255 之间的数字, 这里 0 表示完全透明的窗口而 255 表示不透明的窗口. 例如:</p>
<pre>MouseGetPos,,, MouseWin
WinGet, Transparent, Transparent, ahk_id %MouseWin%  <em>; 鼠标光标下的窗口透明度.</em></pre>
<p><strong>TransColor</strong>: 获取窗口的透明色 (请参阅 <a href="WinSet.htm#TransColor">WinSet</a> 了解如何设置透明色). 出现后面这些情况时 <em>OutputVar</em> 被置空: 1) 操作系统低于 Windows XP; 2) 没有匹配窗口; 3) 窗口没有透明色; 或 4) 其他情况 (由操作系统行为引起), 例如设置透明后窗口被最小化, 还原和/或重设大小. 否则, 被设置为六位的十六进制 RGB 颜色值, 例如 0x00CC99. 例如:</p>
<pre>MouseGetPos,,, MouseWin
WinGet, TransColor, TransColor, ahk_id %MouseWin%  <em>; 鼠标光标下的窗口透明色.</em></pre>
<p><strong>Style</strong> 或 <strong>ExStyle</strong>: 分别获取表示窗口样式或扩展样式的 8 位十六进制数. 如果没有匹配窗口, 那么 <em>OutputVar</em> 被置空. 下面的例子判断窗口是否含有 WS_DISABLED 样式:</p>
<pre>WinGet, Style, Style, My Window Title
if (Style &amp; 0x8000000)  <em>; 0x8000000 为 WS_DISABLED.</em>
  ... 窗口处于不可用状态, 执行适当的动作.</pre>
<p>下一个例子判断窗口是否含有 WS_EX_TOPMOST 样式 (置顶):</p>
<pre>WinGet, ExStyle, ExStyle, My Window Title
if (ExStyle &amp; 0x8)  <em>; 0x8 为 WS_EX_TOPMOST.</em>
  ... 窗口处于置顶状态, 执行适当的动作.</pre>
<p>请参阅 <a href="../misc/Styles.htm">样式表</a> 了解部分样式.</p>
<h3>备注</h3>
<p>窗口的 ID 号只在窗口的生存期内有效. 换句话说, 如果重启了应用程序, 其所有的窗口都会使用新的 ID 号.</p>
<p>由此命令获取的 ID 号是数值的 (不包含前缀 "ahk_id"), 且不论 <a href="SetFormat.htm">SetFormat</a> 的设置如何都保存为十六进制格式.</p>
<p>当前鼠标光标下的窗口 ID 可以通过 <a href="MouseGetPos.htm">MouseGetPos</a> 获取.</p>
<p>尽管当前 ID 号为 32 位的无符号整数, 但是在未来的版本中可能变成 64 位. 因此, 对它们进行数值运算例如加法是不可靠的, 因为这些运算需要把输入字符串解析为有符号而不是无符号的整数.</p>
<p>窗口标题和文本是区分大小写的. 只有在打开 <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> 设置时, 才能检测到隐藏窗口.</p>
<h3>相关</h3>
<p><a href="WinGetClass.htm">WinGetClass</a>, <a href="Process.htm">Process</a>, <a href="WinGetTitle.htm">WinGetTitle</a>, <a href="MouseGetPos.htm">MouseGetPos</a>, <a href="ControlGet.htm">ControlGet</a>, <a href="ControlFocus.htm">ControlFocus</a>, <a href="GroupAdd.htm">GroupAdd</a></p>
<h3>示例</h3>
<pre class="NoIndent"><em>; Example #1: 最大化活动窗口并显示其唯一 ID:</em>
WinGet, active_id, ID, A
WinMaximize, ahk_id %active_id%
MsgBox, The active window's ID is "%active_id%".

<em>; Example #2: 访问整个系统上所有窗口并显示它们的信息:</em>
WinGet, id, list,,, Program Manager
Loop, %id%
{
    this_id := id%A_Index%
    WinActivate, ahk_id %this_id%
    WinGetClass, this_class, ahk_id %this_id%
    WinGetTitle, this_title, ahk_id %this_id%
    MsgBox, 4, , Visiting All Windows`n%a_index% of %id%`nahk_id %this_id%`nahk_class %this_class%`n%this_title%`n`nContinue?
    IfMsgBox, NO, break
}

<em>; Example #3: 从 ControlList 中提取每个控件的名称:</em>
WinGet, ActiveControlList, ControlList, A
Loop, Parse, ActiveControlList, `n
{
    MsgBox, 4,, Control #%a_index% is "%A_LoopField%". Continue?
    IfMsgBox, No
        break
}

<em>; Example #4: 实时显示活动窗口的控件列表:</em>
#Persistent
SetTimer, WatchActiveWindow, 200
return
WatchActiveWindow:
WinGet, ControlList, ControlList, A
ToolTip, %ControlList%
return</pre>

</body>
</html>
